Iterable
	Iterator<T> iterator()

Collection extends Iterable
	int size()
	boolean isEmpty()
	boolean contains(Object o)
	Iterator<E> iterator()
	Object[] toArray()
	boolean add(E e)
	boolean remove(Object o)
	void clear()

List extends Collection
	int size()
	boolean isEmpty()
	boolean contains(Object o)
	Iterator<E> iterator()
	Object[] toArray()
	boolean add()
	boolean remove(Object o)
	void clear()
	E get(int index)
	E set(int index, E e)
	E remove(int index)
	int indexOf(Object o)
	int lastINdexOf(Object o)
	List<E> subList(int fromIndex, int toIndex)

Map<K,V>
	int size()
	boolean isEmpty()
	boolean containsKey(Object key)
	boolean containsValue(object value)
	V get(Object key)
	V put(K key,V value)
	V remove(Object key)
	void putAll(Map<? extends K, ? extends V)
	void clear()
	Set<K> keySet()
	Collection<V> values()
	Set<Map.Entry<K,V>> entrySet()
	interface Entry<K,V>{
		K getKey()
		V getValue()
		V setValue(V value)
	}





